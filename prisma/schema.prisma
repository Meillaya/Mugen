generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  books         Book[]
  readingGoals  ReadingGoal[]
}

model Book {
  id             String    @id @default(cuid())
  title          String
  author         String
  coverImage     String?
  status         BookStatus @default(TO_READ)
  rating         Int?      @db.SmallInt
  notes          String?   @db.Text
  startDate      DateTime?
  completionDate DateTime?
  pagesTotal     Int?
  pagesRead      Int?      @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ReadingGoal {
  id          String       @id @default(cuid())
  year        Int
  targetBooks Int
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([userId, year])
}

enum BookStatus {
  TO_READ
  READING
  COMPLETED
  DNF
}